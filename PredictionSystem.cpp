#include "sdk.h"
#include "PredictionSystem.h"
#include "global.h"
#include "xor.h"

static char* cMoveData = nullptr;

void CPredictionSystem::EnginePrediction(CUserCmd* pCmd)
{
	return;

	if (!g_pMoveHelper || !pCmd || !G::LocalPlayer)
		return;

	CMoveData C_MoveData;

	iFlagsBackup = *G::LocalPlayer->GetFlags();
	iButtonsBackup = pCmd->buttons;

	G::LocalPlayer->SetCurrentCommand(pCmd);

	if (!m_pPredictionRandomSeed || !m_pSetPredictionPlayer) {
		m_pPredictionRandomSeed = *reinterpret_cast<int**>(FindPatternIDA((XorStr("client.dll")), XorStr("A3 ? ? ? ? 66 0F 6E 86")) + 1);
		m_pSetPredictionPlayer = *reinterpret_cast<int**>(FindPatternIDA((XorStr("client.dll")), XorStr("89 35 ? ? ? ? F3 0F 10 48 20")) + 2);
	}

	if (!cMoveData)
		cMoveData = (char*)(calloc(1, sizeof(CMoveData)));

	g_pMoveHelper->SetHost(G::LocalPlayer);
	*m_pPredictionRandomSeed = MD5_PseudoRandom(pCmd->command_number) & 0x7FFFFFFF;
	*m_pSetPredictionPlayer = uintptr_t(G::LocalPlayer);

	g_pGlobals->curtime = G::LocalPlayer->GetTickBase() * g_pGlobals->interval_per_tick;
	g_pGlobals->frametime = g_pGlobals->interval_per_tick;

	pCmd->buttons |= *reinterpret_cast<uint8_t*>(uintptr_t(G::LocalPlayer) + 0x3310);

	if (pCmd->impulse)
		*reinterpret_cast<uint8_t*>(uintptr_t(G::LocalPlayer) + 0x31EC) = pCmd->impulse;

	C_MoveData.m_nButtons = pCmd->buttons;
	int buttonsChanged = pCmd->buttons ^ *reinterpret_cast<int*>(uintptr_t(G::LocalPlayer) + 0x31E8);
	*reinterpret_cast<int*>(uintptr_t(G::LocalPlayer) + 0x31DC) = (uintptr_t(G::LocalPlayer) + 0x31E8);
	*reinterpret_cast<int*>(uintptr_t(G::LocalPlayer) + 0x31E8) = pCmd->buttons;
	*reinterpret_cast<int*>(uintptr_t(G::LocalPlayer) + 0x31E0) = pCmd->buttons & buttonsChanged;
	*reinterpret_cast<int*>(uintptr_t(G::LocalPlayer) + 0x31E4) = buttonsChanged & ~pCmd->buttons;

	g_pGameMovement->StartTrackPredictionErrors(G::LocalPlayer);

	iTickBaseBackup = G::LocalPlayer->GetTickBase();

	g_pPrediction->SetupMove(G::LocalPlayer, pCmd, g_pMoveHelper, reinterpret_cast<CMoveData*>(cMoveData));
	g_pGameMovement->ProcessMovement(G::LocalPlayer, reinterpret_cast<CMoveData*>(cMoveData));
	g_pPrediction->FinishMove(G::LocalPlayer, pCmd, reinterpret_cast<CMoveData*>(cMoveData));

	G::LocalPlayer->GetTickBase() = iTickBaseBackup;

	g_pGameMovement->FinishTrackPredictionErrors(G::LocalPlayer);

	G::LocalPlayer->SetCurrentCommand(nullptr);
	*m_pPredictionRandomSeed = -1;
	*m_pSetPredictionPlayer = 0;
	g_pMoveHelper->SetHost(0);

	*G::LocalPlayer->GetFlags() = iFlagsBackup;
	pCmd->buttons = iButtonsBackup;
}























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































