#include "sdk.h"
#include "MaterialHelper.h"
#include "xor.h"
CMaterialHelper* g_MaterialHelper = nullptr;

typedef void(__thiscall* orgGameFunc_InitKeyValues)(void* thisptr, const char* name);
orgGameFunc_InitKeyValues pInitKeyValues;
void CMaterialHelper::GameFunc_InitKeyValues(KeyValues* pKeyValues, const char* name)
{
	
	if (!pInitKeyValues)
		pInitKeyValues = reinterpret_cast<orgGameFunc_InitKeyValues>(offys.dwInitKeyValues);

	pInitKeyValues(pKeyValues, name);
}
typedef void(__thiscall* orgGameFunc_LoadFromBuffer)(void* thisptr, const char* resourceName, const char* pBuffer, /*IBaseFileSystem**/ void* pFileSystem, const char* pPathID, void* pfnEvaluateSymbolProc);
orgGameFunc_LoadFromBuffer pLoadFromBuffer;
void CMaterialHelper::GameFunc_LoadFromBuffer(KeyValues* pKeyValues, const char* resourceName, const char* pBuffer, /*IBaseFileSystem**/ void* pFileSystem, const char* pPathID, void* pfnEvaluateSymbolProc)
{

	if (!pLoadFromBuffer)
		pLoadFromBuffer = reinterpret_cast<orgGameFunc_LoadFromBuffer>(offys.dwLoadFromBuffer);

	pLoadFromBuffer(pKeyValues, resourceName, pBuffer, pFileSystem, pPathID, pfnEvaluateSymbolProc);
}
IMaterial* CMaterialHelper::CreateMaterial(bool shouldIgnoreZ, bool isLit, bool isWireframe) //credits to ph0ne
{
	static int iCreated = 0;

	static const char szTmp[] = {
		"\"%s\"\
		\n{\
		\n\t\"$basetexture\" \"vgui/white_additive\"\
		\n\t\"$envmap\"       \"env_cubemap\"\
		\n\t\"$model\" \"1\"\
		\n\t\"$normalmapalphaenvmapmask\"  \"1\"\
		\n\t\"$envmapcontrast\"             \"1\"\
		\n\t\"$flat\" \"1\"\
		\n\t\"$nocull\" \"0\"\
		\n\t\"$selfillum\" \"1\"\
		\n\t\"$halflambert\" \"1\"\
		\n\t\"$nofog\" \"1\"\
		\n\t\"$ignorez\" \"%i\"\
		\n\t\"$znearer\" \"0\"\
		\n}\n"
	};

	char szMaterial[512];
	char szBaseType[64];

	/*if (isLit) {
		static const char pszBaseType[] = "UnlitGeneric";
		sprintf_s(szMaterial, sizeof(szMaterial), szTmp, pszBaseType, (shouldIgnoreZ) ? 1 : 0, (isWireframe) ? 1 : 0);
		strcpy_s(szBaseType, pszBaseType);
	}
	else {*/
		static const char pszBaseType[] = "VertexLitGeneric";
		sprintf_s(szMaterial, sizeof(szMaterial), szTmp, pszBaseType, (shouldIgnoreZ) ? 1 : 0);
		strcpy_s(szBaseType, pszBaseType);
//	}

	char szName[512];
	sprintf_s(szName, sizeof(szName), "custom_material_%i.vmt", iCreated);

	++iCreated;

	KeyValues* keyValues = new KeyValues();
	GameFunc_InitKeyValues(keyValues, szBaseType);
	GameFunc_LoadFromBuffer(keyValues, szName, szMaterial, nullptr, NULL, nullptr);

	IMaterial* createdMaterial = g_pMaterialSystem->CreateMaterial(szName, keyValues);
	createdMaterial->IncrementReferenceCount();

	return createdMaterial;
}

void CMaterialHelper::ForceMaterial(Color color, IMaterial* material, bool useColor, bool forceMaterial)
{
	if (useColor) {
		float temp[3] = {
			color.r(),
			color.g(),
			color.b()
		};

		temp[0] /= 255.f;
		temp[1] /= 255.f;
		temp[2] /= 255.f;

		float alpha = color.a();

		g_pRenderView->SetBlend(1.0f);
		g_pRenderView->SetColorModulation(temp);
	}

	if (forceMaterial)
		g_pModelRender->ForcedMaterialOverride(material);
	else
		g_pModelRender->ForcedMaterialOverride(NULL);
}
CMaterialHelper::CMaterialHelper()
{
	CoveredLit = CreateMaterial(true);
	OpenLit = CreateMaterial(false);
	CoveredFlat = CreateMaterial(true, false);
	OpenFlat = CreateMaterial(false, false);
	Wire = CreateMaterial(true, true, true);
	AddWire = CreateMaterial(false, true, true);
}























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































